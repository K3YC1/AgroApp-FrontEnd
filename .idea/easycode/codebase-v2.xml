<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/agro_app/ExampleInstrumentedTest.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/helpers/StringHelper.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/retrofit/request/LoginRequest.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/retrofit/request/RegistroRequest.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/retrofit/response/LoginResponse.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/retrofit/response/RegistroResponse.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/retrofit/AgroCliente.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/retrofit/AgroServicio.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/view/activities/HomeActivity.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/view/activities/MainActivity.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/view/activities/SesionActivity.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/viewmodel/AuthViewModel.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/CarritoActivity.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/PedidoActivity.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/java/com/example/agro_app/ProductoActivity.java;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/color/switch_text_color.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/arrow_left_solid.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/bars_solid.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/cart_shopping_solid.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/circle_mask.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/heart_solid.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/house_solid.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/ic_launcher_background.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/ic_launcher_foreground.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/resumen_carrito.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/rotate_left_solid.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/search_bar.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/thumb.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/drawable/track.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/font/nunito_bold.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/activity_carrito.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/activity_home.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/activity_main.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/activity_pedido.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/activity_producto.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/activity_sesion.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/layout/nav_header_main.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values/colors.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values/font_certs.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values/ic_launcher_background.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values/preloaded_fonts.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values/strings.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values/themes.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/values-night/themes.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/xml/backup_rules.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/res/xml/data_extraction_rules.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/main/AndroidManifest.xml;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App/app/src/test/java/com/example/agro_app/ExampleUnitTest.java" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;D:/acer/Documentos de Clase IDAT/CICLO 5 DESARROLLO DE SISTEMAS DE LA INFORMACION/DESARROLLO DE APLICACIONES MOVILES 1 (DAM)/AGRO_EMY_APP/Agro_App&quot;:&quot;{\&quot;/app/src/main/res/layout/activity_producto.xml\&quot;:\&quot;This XML file defines the layout for the ProductoActivity in the app.\\n\\nKey things it does:\\n\\n- Defines the root layout as a ConstraintLayout, which allows positioning views using constraints rather than nested layouts.\\n\\n- Sets the width and height of the ConstraintLayout to match the parent view, so it fills the entire screen. \\n\\n- Specifies the namespace prefixes for Android, app (for app-specific attributes), and tools (for design time attributes).\\n\\n- Sets the context as the ProductoActivity class, so this layout knows which Activity it belongs to.\\n\\n- Currently it is empty, but it will be used to define the UI elements like TextViews, Buttons, Images etc that make up the screen using ConstraintLayout.\\n\\n- When inflated, this layout will provide the visual structure and design for the ProductoActivity screen. Additional views, interactions etc will be added programmatically in the Activity code.\\n\\nSo in summary, it defines the basic container layout that will hold all the UI elements for the ProductoActivity screen.\&quot;,\&quot;/app/src/main/res/drawable/cart_shopping_solid.xml\&quot;:\&quot;This XML file defines a vector drawable resource that can be used in Android apps.\\n\\nKey things it does:\\n\\n- Defines a vector graphic using a \\u003cpath\\u003e element to draw the outline of a shopping cart icon\\n- Sets the path data attribute to define the exact coordinates of the path \\n- Sets the fill color to black (#FF000000)\\n- Sets the viewport and dimensions so it scales properly at different sizes\\n- Draws the main cart shape with a handle\\n- Adds two circles inside the cart to represent wheels\\n\\nThe main functions are:\\n\\n- Defines a reusable vector graphic icon \\n- Allows scaling to different sizes without losing quality\\n- Can be referenced and used as a drawable in layouts, buttons, images etc\\n- Defines the path data precisely to draw the cart shape\\n- Sets attributes like color, viewport etc to control its appearance\\n\\nSo in summary, it defines a scalable vector icon for a shopping cart that can be reused throughout the app.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/retrofit/AgroCliente.java\&quot;:\&quot;This AgroCliente Java file is used to create a Retrofit client for making API requests to the backend server in an Android app.\\n\\nKey things it does:\\n\\n- Defines the base URL for API requests as http://172.27.208.1:9080/api/usuarios/\\n\\n- Creates a Retrofit instance using this base URL and Gson converter factory \\n\\n- Creates an instance of AgroServicio (the API interface) using the Retrofit instance\\n\\n- Provides a getInstance() method that returns the AgroServicio instance\\n\\nSo in summary:\\n\\n- It initializes Retrofit with the backend URL \\n- Creates an instance of the API interface \\n- Exposes a method to retrieve the API interface instance\\n\\nThis allows other classes to easily make API requests by calling methods on the returned AgroServicio instance, without having to directly deal with Retrofit initialization.\\n\\nSo the key functions are:\\n\\n- getInstance() - Returns the API interface instance \\n- Constructor - Initializes Retrofit and creates API interface instance\\n\\nThis is a common Retrofit client pattern to abstract away Retrofit initialization and provide a simple way to make API requests.\&quot;,\&quot;/app/src/main/res/drawable/arrow_left_solid.xml\&quot;:\&quot;This XML file defines a vector drawable resource that can be used as an arrow pointing left icon.\\n\\nKey functions:\\n\\n- It is a vector drawable, which allows it to be scaled smoothly without losing quality.\\n\\n- The \\u003cpath\\u003e element defines the shape of the arrow using pathData coordinates. This creates a left-pointing arrow shape. \\n\\n- fillColor\\u003d\\\&quot;#FF000000\\\&quot; sets the color of the arrow to black.\\n\\n- android:viewportWidth and android:viewportHeight define the dimensions of the virtual canvas on which the vector is drawn.\\n\\n- android:width and android:height define the intrinsic size of the vector drawable.\\n\\n- It can be referenced and used as an image resource in Android apps, such as for a back button icon. The vector definition allows it to scale smoothly on different screen densities.\\n\\nSo in summary, this file defines a scalable left-pointing arrow icon as a vector drawable that can be used as an image resource in an Android app.\&quot;,\&quot;/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\&quot;:\&quot;This file defines an adaptive icon for the launcher icon in Android apps.\\n\\nKey functions:\\n\\n- Defines an adaptive icon resource that can be used as the launcher icon for the app.\\n\\n- Specifies a background drawable (@color/ic_launcher_background) that will be used as the background of the icon.\\n\\n- Specifies a foreground drawable (@mipmap/ic_launcher_foreground) that will be overlayed on top of the background. This allows combining multiple images/drawables into the icon.\\n\\n- The adaptive icon format allows the icon to adapt and display properly on different device screens, densities, and Android versions in a resolution-independent way.\\n\\n- On Android 8.0+ devices, it will be displayed as a single unified icon that combines the background and foreground. On older devices it will fallback to displaying just the foreground drawable.\\n\\n- Located in the mipmap-anydpi-v26 folder to support adaptive icons on Android 8.0 (API 26) and higher.\\n\\nSo in summary, it defines the app\\u0027s launcher icon using Android\\u0027s adaptive icon format for a resolution-independent icon that works on different devices.\&quot;,\&quot;/app/src/main/res/drawable/rotate_left_solid.xml\&quot;:\&quot;This XML file defines a vector drawable resource that represents a rotate left icon/symbol.\\n\\nKey functions:\\n\\n- It defines a \\u003cvector\\u003e element which is the root node for a vector drawable.\\n\\n- Attributes like android:width, android:height, android:viewportWidth, android:viewportHeight set the size and viewport for the vector graphic. \\n\\n- A \\u003cpath\\u003e element defines the shape of the icon using the android:pathData attribute which contains path drawing commands.\\n\\n- android:fillColor sets the color used to fill the path, in this case black (#FF000000).\\n\\n- The pathData draws a complex path that resembles a rotate left arrow shape. \\n\\n- When referenced in an ImageView or elsewhere, this vector drawable will be rendered as a scalable rotate left icon symbol.\\n\\nSo in summary, it defines a scalable vector graphic icon for \\\&quot;rotate left\\\&quot; that can be reused throughout the app at different sizes. The \\u003cpath\\u003e element draws the shape and \\u003cvector\\u003e containers it as a single drawable resource.\&quot;,\&quot;/app/src/main/AndroidManifest.xml\&quot;:\&quot;The AndroidManifest.xml file is the main configuration file for an Android application. It contains important metadata about the application such as:\\n\\n- Permissions required by the app (e.g. internet access)\\n- Application components like activities and services  \\n- Intent filters to define app entry points\\n- Configuration settings like theme, label, icon etc.\\n\\nKey functions:\\n\\n- Declares app permissions needed \\n- Registers app components like activities and services\\n- Defines app label, icon, theme etc.\\n- Sets up intent filters to handle app launching and linking\\n- Configures app behaviors like backup, data extraction etc.  \\n- Provides metadata for app resources and configuration\\n- Is a core file needed for the app to work properly on Android\\n\\nIn summary, it provides essential configuration details to the Android system about the capabilities and functionality of the application. Without a properly written AndroidManifest.xml file, the app will not work.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/retrofit/response/RegistroResponse.java\&quot;:\&quot;This RegistroResponse.java file is a model class that represents the response from a registration API call in retrofit.\\n\\nKey things about this file:\\n\\n- It is in the retrofit.response package, indicating it models a response object.\\n\\n- The class name RegistroResponse suggests it contains data related to a registration/sign up response. \\n\\n- It does not contain any fields or properties yet. This is common for a basic response model - fields will be added as the API response structure is defined.\\n\\n- This class will be used to deserialize the JSON response from the registration API into a Java object using retrofit. This allows easy access to the response data in the calling code.\\n\\n- No functions are defined yet. Generally a response model only needs getters for any fields, it does not contain business logic.\\n\\n- Additional fields like success status, error messages etc will likely be added as the registration API contract is finalized.\\n\\n- This response model enables strong typing of the registration response and clear separation of response handling from the rest of the app code.\\n\\nSo in summary, it is a basic model class to represent the registration API response in Java objects using retrofit.\&quot;,\&quot;/app/src/main/res/drawable/ic_launcher_foreground.xml\&quot;:\&quot;This file defines a vector drawable that is used as the launcher icon for the Android app.\\n\\nKey functions:\\n\\n- It defines a vector drawable using the \\u003cvector\\u003e element. Vectors allow resolution-independent graphics.\\n\\n- It contains two \\u003cpath\\u003e elements that define the shapes of the icon. One for the main logo shape and one for the inner details. \\n\\n- Attributes like android:pathData, android:fillColor, android:strokeWidth etc are used to style the paths.\\n\\n- Gradients are defined inside \\u003cgradient\\u003e for color transitions on the main logo path. \\n\\n- Dimensions like android:width and android:height set the size of the vector/icon. \\n\\n- The viewport size is defined using android:viewportWidth and android:viewportHeight to allow scaling.\\n\\n- This vector drawable is used as the launcher icon for the app brand/logo that appears in the home screen, app drawer etc. It provides a resolution-independent icon image.\\n\\nSo in summary, it defines the app\\u0027s launcher icon as a scalable vector graphic using Path elements and attributes to style the shapes and colors.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/ProductoActivity.java\&quot;:\&quot;This Java file defines an Activity class called ProductoActivity that is used in an Android app.\\n\\nSome key things about this file:\\n\\n- It extends AppCompatActivity, which means it inherits functionality from the Android support library for building activities.\\n\\n- onCreate() is overridden to set up the activity when it is first created. It calls the superclass onCreate() method and then sets the content view to the activity_producto layout resource.\\n\\n- This class represents a single screen/view in the Android app for displaying product information. \\n\\n- When this activity is launched by the Android system, onCreate() will be called to initialize and display the user interface elements defined in activity_producto.xml.\\n\\n- It allows the app to transition to a new screen dedicated to showing product data when needed.\\n\\n- Additional functionality could be added like retrieving product data from a database and populating UI elements, handling button clicks, and transitioning to other activities.\\n\\nSo in summary, this Java class defines the ProductoActivity screen/view and its key responsibility is setting up and displaying the user interface for that screen when it is launched.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/retrofit/response/LoginResponse.java\&quot;:\&quot;This LoginResponse.java file defines a model class for the response received from the server after a login request.\\n\\nKey points:\\n\\n- It is in the retrofit.response package, indicating it models a response from a Retrofit API call.\\n\\n- It contains fields for all the data expected in a login response, like user ID, name, email, password, timestamps etc. \\n\\n- There are getter and setter methods for each field to allow accessing/modifying the field values.\\n\\n- This class maps to the JSON response received from the server after login, allowing easy parsing of the response into an object.\\n\\n- The fields and their types match what is expected in the login response from the server API.\\n\\nKey functions:\\n\\n- Getter and setter methods for each field - to retrieve and set field values\\n- Empty constructor - to create an empty object \\n- Fields to map the response JSON to an object\\n\\nSo in summary, it defines a model class to represent the login response from the server API, with getters/setters to access fields and map the JSON response to an object. This helps in easily parsing and using the login response data received from the server.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/retrofit/request/RegistroRequest.java\&quot;:\&quot;This RegistroRequest.java file is a request model class used for user registration in Retrofit.\\n\\nKey points:\\n\\n- It is in the retrofit.request package, indicating it is a request model for Retrofit API calls.\\n\\n- It contains fields for the user\\u0027s nombreUsuario, correo and contraseña (password) that will be sent in the registration request. \\n\\n- It has getter and setter methods for each field to allow setting and retrieving the field values.\\n\\n- This class is used to map the user registration data to an object that can be sent in the Retrofit POST request body to the backend API for registration.\\n\\n- The backend will receive this object and extract the user details like name, email, password to process the registration.\\n\\nSo in summary, this request model class:\\n\\n1. Defines the data structure for the registration request \\n2. Allows mapping user input to an object \\n3. Is used to send registration data in Retrofit requests\\n\\nIt is a data model that facilitates sending user registration details to the backend API via Retrofit.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/viewmodel/AuthViewModel.java\&quot;:\&quot;This AuthViewModel.java file is an Android ViewModel class that handles authentication (login and registration) functionality.\\n\\nKey things it does:\\n\\n- It extends AndroidViewModel to make it lifecycle-aware. This allows it to survive configuration changes like screen rotations.\\n\\n- It exposes MutableLiveData objects to observe authentication responses from the network. This allows other classes like fragments to observe these responses.\\n\\n- It has a authenticarUsuario() method that makes a login request to the backend API using Retrofit and observes the response.\\n\\n- It has a registroUsuario() method that makes a registration request to the backend API using Retrofit and observes the response. \\n\\n- It uses Retrofit to make API requests to the backend for login and registration.\\n\\n- It handles the network callbacks for login and registration requests, setting the response data on the MutableLiveData objects.\\n\\n- It provides a single source of truth for authentication state that other classes can observe without having to directly make network requests.\\n\\nSo in summary, it acts as a central authentication manager that handles making login/registration requests and exposes live data for other classes to observe authentication responses. This follows the MVVM pattern.\&quot;,\&quot;/app/src/main/res/font/nunito_bold.xml\&quot;:\&quot;This XML file defines a custom font family to be used in an Android app.\\n\\nKey things it does:\\n\\n- Defines a font family resource that can be referenced elsewhere in the app\\n- Specifies the font provider (Google Fonts) to download the font from \\n- The font name is \\\&quot;Nunito\\\&quot; and the weight/style is bold (700)\\n- Specifies the font provider authority, package and query string to identify the font\\n- References a certs array that contains the signing certificate for the font provider API\\n\\nWhen this font family is referenced, it will trigger Android to download the Nunito Bold font from Google Fonts. The certs are used to verify the authenticity of the font data received from Google.\\n\\nThe main functions are:\\n\\n1. Define a custom font family resource \\n2. Specify the remote font provider (Google Fonts)\\n3. Identify the specific font variant (name, weight) to download\\n4. Provide authentication details for the font provider API\\n5. Allow other resources to reference this font definition\\n\\nSo in summary, it sets up a custom remote font that can then be applied to text views throughout the app.\&quot;,\&quot;/app/src/main/res/xml/backup_rules.xml\&quot;:\&quot;This backup_rules.xml file controls what data from the app is backed up during automatic device backups.\\n\\nThe key functions of this file are:\\n\\n- It allows including or excluding specific types of app data from backups. The main types are shared preferences, files, and databases.\\n\\n- The \\u003cinclude\\u003e tag specifies data that should be included in backups. For example \\u003cinclude domain\\u003d\\\&quot;sharedpref\\\&quot; path\\u003d\\\&quot;.\\\&quot;/\\u003e would back up all shared preference files. \\n\\n- The \\u003cexclude\\u003e tag specifies data that should be excluded from backups. For example \\u003cexclude domain\\u003d\\\&quot;sharedpref\\\&quot; path\\u003d\\\&quot;device.xml\\\&quot;/\\u003e would exclude a specific shared preference file.\\n\\n- By default, nothing is included for backup unless specified. So this file allows the developer to selectively choose what user-generated app data is important to backup.\\n\\n- It helps reduce the size of backups by only including necessary data, rather than backing up entire databases or file directories by default.\\n\\n- The comments indicate this file is only used on Android 12 and higher, where automatic backups were introduced. On older Android versions it has no effect.\\n\\nSo in summary, it provides fine-grained control over what app data is included in automatic device backups for the user.\&quot;,\&quot;/app/src/main/res/drawable/track.xml\&quot;:\&quot;This XML file defines a selector drawable resource that is used to set different drawable states for a view based on its checked state.\\n\\nKey functions:\\n\\n- It defines two \\u003citem\\u003e elements, one for when the view is checked (android:state_checked\\u003d\\\&quot;true\\\&quot;) and one for when it is not checked.\\n\\n- Each \\u003citem\\u003e defines a \\u003cshape\\u003e with rectangle shape and rounded corners. \\n\\n- The \\u003cshape\\u003e has a solid color fill defined by @color/colorgrisbtn.\\n\\n- It sets the width and height of the shape using \\u003csize\\u003e elements.\\n\\n- When the view is checked, it will use the drawable defined in the first \\u003citem\\u003e. When not checked, it will use the second \\u003citem\\u003e drawable.\\n\\n- This allows setting a different appearance for the view based on its checked state, such as changing the background color when checked vs unchecked.\\n\\n- The selector drawable can then be applied as the background of a view to change its appearance based on its checked state.\\n\\nSo in summary, it defines different drawables for checked and unchecked states that can be applied to a view to change its visual state based on check status.\&quot;,\&quot;/app/src/main/res/values/themes.xml\&quot;:\&quot;This themes.xml file defines the themes used in the Android app.\\n\\nKey functions:\\n\\n- Defines the base theme \\\&quot;Base.Theme.Agro_App\\\&quot; which inherits from the Material3 DayNight theme with no action bar. This will be the parent theme for other themes.\\n\\n- Allows customizing the base theme by overriding attributes like colorPrimary.\\n\\n- Defines the main \\\&quot;Theme.Agro_App\\\&quot; theme which inherits directly from the base theme. This will be the default theme used by activities if no other theme is specified. \\n\\n- Located in res/values/themes.xml so the themes are available in all app configurations (language/orientation etc).\\n\\n- Uses the Material3 component theme which provides Material Design styling and components out of the box.\\n\\n- Allows easily creating additional themes by defining new styles that inherit from the base theme and override specific attributes.\\n\\n- Centralizes all theme definitions so they can be managed and updated in one place.\\n\\nSo in summary, it defines the core themes used by the app based on Material Design standards.\&quot;,\&quot;/app/src/main/res/layout/activity_carrito.xml\&quot;:\&quot;This XML layout file defines the user interface for the CarritoActivity activity in the app.\\n\\nKey functions:\\n\\n- Defines a ConstraintLayout as the root layout container\\n- Uses ImageViews and CardViews for background and framing elements \\n- Contains a FrameLayout to overlay UI elements\\n- Includes a LinearLayout header with back button and logo\\n- Main LinearLayout container for cart content \\n- TextViews and CheckBox to display cart summary info\\n- CardView to display cart item details\\n- Button to trigger payment process\\n\\nIn summary, it lays out the visual structure and UI elements for displaying a shopping cart, including items, totals, and a payment button. The different view groups and widgets are positioned and styled to present the cart information and allow the user to checkout.\&quot;,\&quot;/app/src/main/res/drawable/ic_launcher_background.xml\&quot;:\&quot;This file defines the background image for the launcher icon (app icon) in an Android app.\\n\\nKey functions:\\n\\n- It is a vector drawable file, allowing the icon to scale smoothly on different screen densities.\\n\\n- The main \\u003cpath\\u003e element defines a green filled rectangle for the background. \\n\\n- Multiple other \\u003cpath\\u003e elements define thin white lines to create a grid pattern overlay. Properties like pathData, strokeWidth, strokeColor control the lines.\\n\\n- Together these create a green grid pattern background for the launcher icon. The vector format allows it to scale to different icon sizes.\\n\\n- It is defined in XML for easy editing of the design. Additional paths can be added to modify the pattern.\\n\\n- The file is located in the res/drawable folder so it can be referenced as the background for the launcher icon image.\\n\\nSo in summary, it defines a scalable vector icon background pattern through multiple path elements in an XML format that can be referenced as the launcher icon background for the app.\&quot;,\&quot;/app/src/main/res/values/font_certs.xml\&quot;:\&quot;This XML file defines font certificate arrays for Google Play services.\\n\\nKey functions:\\n\\n- It defines two string arrays - one for development/debug certificates and one for production certificates.\\n\\n- The com_google_android_gms_fonts_certs array aggregates the dev and prod certificate arrays. \\n\\n- The individual dev and prod arrays contain the actual certificate data as base64 encoded strings.\\n\\n- This allows the app to validate font files downloaded from Google Play services by checking the signature against the certificates defined here.\\n\\n- Having separate dev and prod certificates allows building and testing against dev certificates, but releasing with the proper prod certificates.\\n\\n- The certificates are used by Google Play services to sign font files it delivers for rendering custom fonts on Android devices.\\n\\nSo in summary, it provides the font validation certificates for Google Play services, separating development from production, to allow secure font delivery and rendering in the app.\&quot;,\&quot;/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\&quot;:\&quot;This XML file defines an adaptive icon for the app launcher icon.\\n\\nKey functions:\\n\\n- Defines an adaptive icon resource that can be used for the launcher icon across different device densities.\\n\\n- Specifies a background drawable (@color/ic_launcher_background) which will fill the background of the icon.\\n\\n- Specifies a foreground drawable (@mipmap/ic_launcher_foreground) which will be overlayed on top of the background. This allows combining multiple images/graphics into the single launcher icon.\\n\\n- The adaptive-icon element allows the icon to adapt/scale to different screen densities without loss of quality, by defining separate foreground and background elements.\\n\\n- Located in the mipmap-anydpi-v26 folder, which tells Android to generate icon images for multiple densities from this single source file for Android 8.0 (API level 26) and higher.\\n\\n- Provides a way to define a custom launcher icon that works across devices in a resolution-independent way for modern Android versions. The separate foreground and background allow for different looks/styles of icons.\\n\\nSo in summary, it defines a scalable, adaptive launcher icon resource for the app using separate foreground and background drawables.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/view/activities/SesionActivity.java\&quot;:\&quot;This SesionActivity.java file is responsible for handling user authentication (login and registration) in the app.\\n\\nKey functions:\\n\\n- onCreate(): Initializes the view binding, ViewModel, and click listeners\\n- onClick(): Handles clicks on the login and register buttons \\n- invocarLogin(): Calls the authenticarUsuario method on the ViewModel to login the user\\n- validarLogin(): Observes the login response live data and handles the response\\n- invocarRegistro(): Calls the registroUsuario method on the ViewModel to register a new user\\n\\nIn summary:\\n\\n- It sets up the UI for login/register screens\\n- Handles clicks to invoke login/register API calls via the ViewModel  \\n- Observes the login response to either navigate to the home screen or show an error\\n- Passes user input to the ViewModel methods to authenticate/register the user\\n\\nSo in essence it is controlling the user authentication flow and coordinating with the ViewModel to make the necessary API requests.\&quot;,\&quot;/app/src/main/res/drawable/circle_mask.xml\&quot;:\&quot;This XML file defines a drawable resource that creates a circular mask shape.\\n\\nKey functions:\\n\\n- \\u003cshape\\u003e element defines it as a shape drawable resource\\n- android:shape\\u003d\\\&quot;oval\\\&quot; specifies the shape as an oval/circle\\n- \\u003csolid\\u003e element defines the fill color of the shape \\n- android:color\\u003d\\\&quot;#000000\\\&quot; sets the fill color to black\\n\\nThis circle mask drawable can then be used as:\\n\\n- A background shape for views \\n- A clip path to make other drawables circular\\n- A mask to apply circular clipping to bitmaps\\n\\nSo in summary, it creates a reusable black circular shape that can be overlaid or used as a mask on other resources to make them circular instead of rectangular. Defining shapes like this in XML allows them to be referenced throughout the app for consistent circular clipping/masking.\&quot;,\&quot;/app/src/main/res/values/colors.xml\&quot;:\&quot;This XML file defines a set of colors that can be referenced throughout the Android app.\\n\\nKey functions:\\n\\n- Defines reusable color values that can be accessed by name. This avoids hardcoding color hex codes everywhere.\\n\\n- Stores the colors in the res/values folder, which makes them accessible as resources from code.\\n\\n- Each \\u003ccolor\\u003e element defines a color with a unique name and hex code value.\\n\\n- Names like \\\&quot;black\\\&quot;, \\\&quot;white\\\&quot; define basic colors. Others like \\\&quot;agro_verde\\\&quot; are custom colors for the app.\\n\\n- Colors can then be referenced in code using R.color.name, or in XML files using @color/name. \\n\\n- This allows colors to be defined in one place and consistently used across layouts, drawables, themes etc.\\n\\n- If a color needs to be changed, only the colors.xml file needs to be updated rather than searching/replacing hex codes everywhere.\\n\\nSo in summary, it centralizes the color definitions as reusable resources that can be accessed throughout the app code and resources.\&quot;,\&quot;/app/src/main/res/layout/activity_home.xml\&quot;:\&quot;This XML layout file defines the user interface for the HomeActivity screen in the app.\\n\\nKey functions:\\n\\n- Defines a DrawerLayout as the root layout to allow for a navigation drawer menu. \\n\\n- Contains a ConstraintLayout as the main content area.\\n\\n- Includes a CardView and ImageView to display a background image and content area.\\n\\n- FrameLayout contains the app bar/toolbar with menu icons and title. \\n\\n- Includes LinearLayouts to display different screen sections like Catalog, Wishlist, Recent Orders. \\n\\n- NavigationView defines the navigation drawer menu that can be opened from the left.\\n\\n- Allows swiping left to open the navigation drawer menu via the DrawerLayout. \\n\\n- Layouts and views are organized with ConstraintLayout, LinearLayout, CardView etc to position UI elements.\\n\\n- Strings, dimensions etc are referenced from resources to support localization and adaptation.\\n\\nSo in summary, it defines the overall UI structure and layout for the main Home screen with elements like app bar, content area and navigation drawer menu.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/retrofit/AgroServicio.java\&quot;:\&quot;This file defines an interface for making API requests to an Agro backend service using Retrofit.\\n\\nKey things:\\n\\n- AgroServicio is the interface name\\n- It defines HTTP request methods (POST, PUT etc) to specific endpoints\\n- The endpoints are for user login and registration \\n- The request bodies and response types are defined using custom model classes\\n\\nKey functions:\\n\\n- login() - Makes a POST request to /usuario/login endpoint. Takes a LoginRequest as body and returns a LoginResponse\\n- registro() - Makes a POST request to /usuario/registrar endpoint. Takes a RegistroRequest as body and returns a RegistroResponse\\n\\nSo in summary, this interface:\\n\\n1. Defines the API endpoints \\n2. Specifies the request and response body types\\n3. Allows making requests to those endpoints from anywhere the interface is implemented\\n\\nThis allows making API calls to the backend in a type-safe way using Retrofit. The actual network requests will be handled by Retrofit.\&quot;,\&quot;/app/src/main/res/drawable/resumen_carrito.xml\&quot;:\&quot;This XML file defines a drawable shape resource for use in the Android app.\\n\\nKey functions:\\n\\n- Defines a rectangle shape \\n- Sets the background color to white using the @color/white reference\\n- Sets the width of the shape to 820dp (density-independent pixels)\\n- Sets the height of the shape to 200dp\\n- The \\u003csize\\u003e tags set the dimensions of the shape\\n- No borders, padding, or rounding are defined, so it will be a simple rectangular block\\n\\nIn summary, this drawable resource defines a white rectangular shape that is 820dp wide and 200dp tall. It can then be used as the background for views in the Android layouts, providing a simple rectangular block with the defined dimensions and color.\&quot;,\&quot;/app/src/main/res/values/strings.xml\&quot;:\&quot;This file (strings.xml) contains all the text strings that are displayed in the Android app. Some key things:\\n\\n- It is located in the res/values folder, which contains app resources like strings, colors, styles etc. \\n\\n- Each string is defined with a name attribute, which is used to reference that string from code.\\n\\n- It contains strings for things like the app name, button labels, text fields labels, messages etc. \\n\\n- This allows all the text to be localized by providing alternative string resources in different languages.\\n\\n- The strings are centralized in one place so they can be easily changed without modifying code.\\n\\n- Key functions:\\n  - Defines all text used in the app\\n  - Allows localization of text\\n  - Centralizes string definitions \\n  - Provides unique identifiers (name attribute) to reference strings from code\\n\\nSo in summary, it contains all the text resources and allows easy internationalization of the app text. The strings are referenced in code using their name attributes.\&quot;,\&quot;/app/src/main/res/color/switch_text_color.xml\&quot;:\&quot;This XML file defines a color selector for a switch widget\\u0027s text color in Android.\\n\\nKey functions:\\n\\n- It is located in the res/color directory, which means it defines a color resource that can be referenced elsewhere.\\n\\n- The \\u003cselector\\u003e element indicates this is a color selector that can change based on state.\\n\\n- It contains \\u003citem\\u003e elements for different states:\\n\\n  - The first item sets the text color to white (@android:color/white) when the switch is in the checked state (android:state_checked\\u003d\\\&quot;true\\\&quot;).\\n\\n  - The second item sets the default text color to a darker gray (@android:color/darker_gray) when no other states apply.\\n\\n- This allows the switch text color to change dynamically based on whether the switch is checked or not. When checked it will be white, otherwise a darker gray.\\n\\n- The color selector can then be referenced using @color/switch_text_color in layout files to apply the selected color to a view based on its state.\\n\\nSo in summary, it defines a reusable color resource that dynamically sets the switch text color based on its checked state.\&quot;,\&quot;/app/src/main/res/drawable/heart_solid.xml\&quot;:\&quot;This XML file defines a vector drawable resource that represents a solid heart shape.\\n\\nKey functions:\\n\\n- It is a vector drawable, which allows the heart shape to be scaled smoothly on different screen densities.\\n\\n- The \\u003cpath\\u003e element defines the outline of the heart shape through a pathData attribute containing SVG-like path commands. \\n\\n- The path is filled with a solid color (#FF000000) which is black.\\n\\n- Attributes like android:width, android:height and the viewport define the size and scaling of the vector shape. \\n\\n- This allows the heart shape to be rendered as a scalable drawable that can be used anywhere drawables are supported in Android, like as a background, icon etc. \\n\\n- Vector drawables avoid issues with pixelation on different screens and allow smooth scaling of the heart shape to any size.\\n\\nSo in summary, it defines a scalable solid heart shape vector drawable that can be reused throughout the app at different sizes without quality loss.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/helpers/StringHelper.java\&quot;:\&quot;This StringHelper class contains utility methods for validating and manipulating strings.\\n\\nKey functions:\\n\\n- regexEmailValidationPattern(String etEmail) - Validates if a given string is a valid email address by matching it against a regular expression pattern for emails. Returns true if it matches the pattern, false otherwise.\\n\\nThis method:\\n\\n1. Defines a regular expression pattern to match a valid email format. \\n\\n2. Uses the String.matches() method to check if the given email string matches the defined regex pattern.\\n\\n3. Returns true if it matches, false if it doesn\\u0027t.\\n\\nSo in summary, this class provides a utility method to validate emails using a regex pattern. It allows validating emails in a standardized way across the app. Additional string validation methods could be added to this class as well to centralize string handling logic.\&quot;,\&quot;/app/src/main/res/drawable/search_bar.xml\&quot;:\&quot;This XML file defines a drawable shape resource for a search bar.\\n\\nKey functions:\\n\\n- \\u003cshape\\u003e element defines it as a rectangle shape\\n- \\u003csolid\\u003e element sets the background color to the color defined in @color/gris_solido \\n- \\u003ccorners\\u003e element gives it rounded corners with a radius of 100dp\\n- \\u003csize\\u003e elements set the width to 320dp and height to 30dp, defining the dimensions\\n- The radius, width, and height give it the appearance of a rounded rectangle search bar\\n\\nIn summary, this drawable resource:\\n\\n- Defines the visual shape as a rectangle \\n- Sets the background color\\n- Adds rounded corners \\n- Sets the width and height dimensions\\n\\nThis allows the search bar shape to be reused throughout the app for a consistent search bar design with predefined styling like color, size and rounded corners. The drawable can then be set as the background for search bar Views.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/CarritoActivity.java\&quot;:\&quot;This Java file defines the CarritoActivity class which extends AppCompatActivity.\\n\\nKey functions:\\n\\n- onCreate(): Called when the activity is first created. Finds the salir ImageView and sets an onClickListener to it.\\n\\n- The onClickListener for salir: When clicked, it finishes the current CarritoActivity and returns to the previous activity. This effectively closes the cart/checkout screen. \\n\\n- It sets the content view to activity_carrito.xml layout file which defines the UI for the cart/checkout screen.\\n\\n- Finds the salir ImageView by ID to add the click listener to allow closing the cart screen.\\n\\nSo in summary, this activity class:\\n\\n1. Defines the UI and behavior for a cart/checkout screen\\n2. Allows closing the screen by clicking the salir ImageView \\n3. Finishes the activity when salir is clicked to return to the previous screen\\n\\nIt provides the basic functionality for a cart/checkout screen that can be opened and closed.\&quot;,\&quot;/app/src/main/res/drawable/house_solid.xml\&quot;:\&quot;This XML file defines a vector drawable that can be used as an icon or image in an Android app.\\n\\nKey functions:\\n\\n- It defines a vector (SVG-like) graphic using a \\u003cpath\\u003e element to draw the outline of a house shape.\\n\\n- The pathData attribute defines the coordinates that make up the shape outline. \\n\\n- fillColor attributes define the color used to fill the shape (black in this case).\\n\\n- Width, height, viewportWidth, viewportHeight attributes define the size and scaling of the vector graphic. \\n\\n- It can be referenced and used as an image resource in Android layouts, drawables, etc. just like a bitmap image.\\n\\n- Vectors scale smoothly to any size without quality loss, making them preferable to bitmaps for icons.\\n\\n- The XML format makes it easy to edit the graphic programmatically or with design tools without having to recompile code.\\n\\nSo in summary, this file defines a scalable house icon/image as a vector drawable that can be included and used as a resource in an Android app.\&quot;,\&quot;/app/src/main/res/xml/data_extraction_rules.xml\&quot;:\&quot;This XML file defines data extraction rules for Android backup and restore.\\n\\nThe key functions of this file include:\\n\\n- Controlling what data is backed up to the cloud via \\u003ccloud-backup\\u003e tags\\n\\n- Using \\u003cinclude\\u003e tags to specify data that should be backed up/transferred \\n\\n- Using \\u003cexclude\\u003e tags to specify data that should NOT be backed up/transferred\\n\\n- Separate sections for cloud backup (\\u003ccloud-backup\\u003e) and device transfers (\\u003cdevice-transfer\\u003e)\\n\\n- Cloud backup section controls what data is synced to the user\\u0027s Google/Android account \\n\\n- Device transfer section would control what data is transferred when restoring to a new device\\n\\n- Allows the app developer to finely control which app data and files are included in backups and restores for privacy and data usage reasons\\n\\nSo in summary, this file allows an Android app to define custom rules for what user and app data should and should not be included when backups are made to the cloud or when restoring to a new device. It gives control over privacy and size of backup files.\&quot;,\&quot;/app/src/androidTest/java/com/example/agro_app/ExampleInstrumentedTest.java\&quot;:\&quot;This file contains an instrumented test for the Agro App project.\\n\\nKey things it does:\\n\\n- It is located in the androidTest source set, which means it will run on an Android device/emulator and not just on the JVM.\\n\\n- It is annotated with @RunWith(AndroidJUnit4.class) to indicate it should run using the AndroidJUnit4 test runner.\\n\\n- It contains a single test method called useAppContext().\\n\\n- This test method gets the Context of the app under test using InstrumentationRegistry. \\n\\n- It asserts that the package name of the app context matches what is expected (\\\&quot;com.example.agro_app\\\&quot;).\\n\\n- This is a simple sanity check to ensure the app is being tested as expected and the test infrastructure is working properly.\\n\\n- Running this test validates that the app can be successfully launched and tested on an Android device/emulator.\\n\\nSo in summary, it is a basic instrumented test that runs on Android to validate the app under test is being launched correctly for testing purposes.\&quot;,\&quot;/app/src/main/res/drawable/thumb.xml\&quot;:\&quot;This XML file defines a selector drawable resource that is used to set the appearance of a view based on its checked state.\\n\\nKey functions:\\n\\n- It defines two \\u003citem\\u003e elements, one for when the view is checked (android:state_checked\\u003d\\\&quot;true\\\&quot;) and one for when it is not checked.\\n\\n- Each \\u003citem\\u003e defines a \\u003cshape\\u003e with rounded corners, a solid color fill, a stroke, and fixed width and height. This creates a rectangle shape.\\n\\n- The checked and unchecked states use the same shape definition, so the visual appearance will be the same regardless of the checked state. \\n\\n- The selector allows a single drawable resource to be used that will automatically switch between the two defined shapes based on the view\\u0027s checked state.\\n\\n- This is commonly used for toggle buttons, checkboxes, radio buttons etc to define their selected and unselected appearance in a consistent way that adapts to state changes.\\n\\nSo in summary, it defines a selectable drawable that can represent two visual states and switch between them automatically based on the view\\u0027s checked property.\&quot;,\&quot;/app/src/main/res/layout/activity_main.xml\&quot;:\&quot;This XML file defines the layout for the MainActivity in the app.\\n\\nKey functions:\\n\\n- Defines a ConstraintLayout as the root layout container\\n- Includes an ImageView at the back with an image set as the background \\n- Includes a LinearLayout on top with vertical orientation\\n- Includes the app logo ImageView at the top center\\n- Includes a Button in the center to access/login  \\n- Includes a LinearLayout below the button with horizontal orientation for the \\\&quot;Don\\u0027t have an account?\\\&quot; text and register link\\n- Sets colors, fonts, sizes etc for various UI elements\\n- Defines the structure and positioning of elements on the main activity screen\\n\\nIn summary, it defines the visual layout and UI for the main landing screen of the app, including background image, logo, login button, and register link text. ConstraintLayout is used as the root container to position and constrain the child elements.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/view/activities/MainActivity.java\&quot;:\&quot;This MainActivity.java file is the main activity for the app.\\n\\nKey functions:\\n\\n- Extends AppCompatActivity - Makes it a compatible activity class\\n- onCreate() - Called when the activity is first created, sets the layout here \\n- Finds the button with id btnIniciarSesion\\n- Sets an onClick listener on the button\\n- When clicked, it creates an Intent to open the SesionActivity activity\\n- Starts the SesionActivity using the Intent\\n\\nIn summary:\\n\\n- It is the main launch activity \\n- Sets the main layout \\n- Handles a button click to open another activity (SesionActivity) using an Intent\\n\\nSo the main purpose is to display the initial UI and handle navigation to another activity when a button is clicked.\&quot;,\&quot;/app/src/main/res/values/ic_launcher_background.xml\&quot;:\&quot;This ic_launcher_background.xml file:\\n\\n- Defines a color resource for the launcher icon background color.\\n\\n- Is located in the res/values folder, which means it defines a value that can be referenced throughout the app. \\n\\n- The \\u003ccolor\\u003e element defines a color with the name \\\&quot;ic_launcher_background\\\&quot; and the hexadecimal value #FFFFFF, which is white.\\n\\n- This color resource can then be referenced using @color/ic_launcher_background in other XML files, like the launcher icon definition in the manifest.\\n\\n- Allows changing the launcher icon background color by modifying this single color value, rather than changing it directly in multiple icon images.\\n\\n- Follows the Android resource naming conventions by using ic_launcher as the base name for launcher-related resources.\\n\\n- Is a values resource, so it only defines a value and does not render any UI itself. The defined color can then be used in views, drawables, etc.\\n\\nSo in summary, it centrally defines the launcher icon background color that can be referenced elsewhere, following the Android resources best practice.\&quot;,\&quot;/app/src/main/res/values/preloaded_fonts.xml\&quot;:\&quot;This preloaded_fonts.xml file:\\n\\n- Defines a list of fonts that will be preloaded by the app.\\n\\n- The \\u003carray\\u003e element defines a list named \\\&quot;preloaded_fonts\\\&quot; that contains font resources.\\n\\n- Each \\u003citem\\u003e element specifies a font asset to preload, in this case @font/nunito_bold.\\n\\n- The key functions of this file are:\\n\\n1. Identifies fonts that should be preloaded by the app at startup for faster loading. \\n\\n2. Prevents fonts from needing to be loaded on demand when first used, which can cause layouts to reflow and flash content.\\n\\n3. Specifies the fonts in an XML resources file so they can be easily maintained in one place.\\n\\n4. The preloaded fonts will be cached in memory so they are immediately available when needed without additional loading.\\n\\n5. By preloading specific fonts, it optimizes the app startup and loading performance for those critical fonts.\\n\\nSo in summary, this file defines a list of fonts to preload at app launch for faster loading and smoother user experience.\&quot;,\&quot;/app/src/main/res/layout/nav_header_main.xml\&quot;:\&quot;This XML file defines the layout for the navigation header in the main activity.\\n\\nKey functions:\\n\\n- Defines a LinearLayout as the root view with vertical orientation\\n- Sets background color, padding, etc for the root layout\\n\\n- Contains another LinearLayout to hold the profile image and menu button\\n- Defines an ImageView for the profile photo \\n\\n- Defines another ImageView for the menu bars icon button\\n\\n- Defines a TextView to display the user\\u0027s name \\n\\n- Defines another TextView to display the user\\u0027s email \\n\\n- Lays out the views in a vertical stacked orientation with padding\\n\\n- Sets IDs for each view to allow finding and updating them from code\\n\\n- Defines styles, colors, drawables etc using resources\\n\\nSo in summary, it lays out the UI for the navigation header that displays the user\\u0027s profile image, name and email. This header view will be included at the top of the navigation drawer layout.\&quot;,\&quot;/app/src/main/res/layout/activity_sesion.xml\&quot;:\&quot;This XML layout file defines the user interface for the SesionActivity activity in the app.\\n\\nKey functions:\\n\\n- Defines a ConstraintLayout as the root layout container\\n- Adds an ImageView to set a gray solid color background \\n- Adds a CardView to display a background image and logo at the top\\n- Adds another CardView at the bottom for the login/register forms\\n- Uses a SwitchCompat button to toggle between login and register forms\\n- Contains two LinearLayouts (layoutOff and layoutOn) to show/hide each form  \\n- layoutOff contains views for the login form like email/password EditTexts and a button\\n- layoutOn contains similar views for the register form  \\n- EditTexts, Buttons, TextViews are used to display the various form fields and labels\\n- Constraints are used to position the views within the parent layouts\\n\\nSo in summary, it sets up the UI for a login/register screen with a toggle between the two forms using the switch button and visibility of the inner layouts.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/view/activities/HomeActivity.java\&quot;:\&quot;This HomeActivity.java file is the main activity for the home screen of the app.\\n\\nKey functions:\\n\\n- Initializes views like the drawer layout, menu bars imageview, bottom navigation imageviews, linearlayouts for fragments\\n\\n- Sets an onClickListener for each bottom navigation imageview to change the visible fragment \\n\\n- Sets the home fragment visible by default\\n\\n- Handles click on menu bars imageview to open/close drawer layout\\n\\n- Handles click on cart imageview to start CartActivity\\n\\n- Sets a green color filter on the selected bottom nav imageview \\n\\n- Method to set the green color on an imageview\\n\\n- Method to handle click on bottom nav, changes color and visibility of fragments\\n\\n- Sets up the ActionBarDrawerToggle for the drawer layout\\n\\nSo in summary, it sets up the home screen layout with bottom navigation, drawer menu and handles click events to switch between fragments and activities like cart.\&quot;,\&quot;/app/src/main/res/drawable/bars_solid.xml\&quot;:\&quot;This XML file defines a vector drawable resource in Android that draws solid bars.\\n\\nKey functions:\\n\\n- It defines a vector drawable with a viewport width and height of 448x512 pixels. This sets the coordinate space for drawing.\\n\\n- It contains a single \\u003cpath\\u003e element that defines the shape to draw. \\n\\n- The pathData attribute defines the shape as 3 rectangles stacked vertically. \\n\\n- The fillColor attribute sets the color of the rectangles to black (#FF000000).\\n\\n- This will draw 3 solid black bars spaced evenly across the viewport height. \\n\\n- Vector drawables allow resolution-independent graphics and can be scaled smoothly. This file defines a reusable graphic of stacked bars that can be used throughout the app at different sizes.\\n\\nSo in summary, it defines a vector drawable resource that draws 3 solid black bars, which can then be reused as a graphic element in the Android app. The vector format allows it to scale smoothly on different devices.\&quot;,\&quot;/app/src/test/java/com/example/agro_app/ExampleUnitTest.java\&quot;:\&quot;This file is a unit test file for the Android app project.\\n\\nKey things about it:\\n\\n- The package name matches the app package name, indicating this is for testing the app code.\\n\\n- It is located in src/test/java, which is the standard location for unit tests in an Android project.\\n\\n- It imports the JUnit testing framework classes like @Test and assertEquals.\\n\\n- There is a single test method called addition_isCorrect(). This is a simple test to verify basic math addition works as expected. \\n\\n- The @Test annotation marks it as a test method that will be run by the testing framework.\\n\\n- It uses assertEquals to verify the expected result (4) matches the actual result of 2 + 2.\\n\\n- This is a basic \\\&quot;hello world\\\&quot; style unit test to demonstrate how to write and run tests on the project. More comprehensive tests would be added for actual app functionality.\\n\\nSo in summary, this file:\\n\\n1. Sets up a basic unit test class \\n2. Contains a single test method annotated with @Test\\n3. Uses JUnit assertions to verify test passes\\n\\nIt demonstrates the basic structure and functions needed for unit testing Android app code.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/PedidoActivity.java\&quot;:\&quot;This Java file defines an Activity class called PedidoActivity that is used to display a screen for orders/pedidos in the agro_app.\\n\\nKey things it does:\\n\\n- Extends AppCompatActivity - This makes it an Activity class that can be launched by Android\\n\\n- onCreate() method - This is called when the Activity is first created. It sets the layout for the Activity screen by calling setContentView(R.layout.activity_pedido)\\n\\n- Sets the layout activity_pedido.xml as the content view - This inflates the UI elements defined in that layout file to display on the screen for this Activity.\\n\\n- Implicitly allows data/logic to be added to handle orders - Additional code could be added to onCreate() or other methods to fetch/display order data, handle clicks, add interactivity etc. \\n\\n- Provides a screen for orders/pedidos in the app - This class defines the basic Activity that will be launched to view and interact with orders/pedidos.\\n\\nSo in summary, it sets up the basic Activity class to display an orders/pedidos screen using a given layout file. Additional code would need to be added to populate/interact with actual order data.\&quot;,\&quot;/app/src/main/res/layout/activity_pedido.xml\&quot;:\&quot;This XML file defines the layout for the PedidoActivity in the app.\\n\\nKey things it does:\\n\\n- Defines the root layout as a ConstraintLayout, which allows positioning views relative to each other using constraints.\\n\\n- Sets the width and height of the ConstraintLayout to match the parent view, so it fills the entire screen. \\n\\n- Specifies the context as the PedidoActivity class, so this layout will be inflated and used for that Activity.\\n\\n- Currently it is empty, but it provides the structure for the Activity layout that views can then be added to using constraints.\\n\\n- When the PedidoActivity is launched, this layout will be inflated and used to display the UI for that screen.\\n\\n- Additional views like TextViews, Buttons, Images etc can be added and their positions defined using constraints to the parent layout or each other.\\n\\n- It allows visually designing the UI for the PedidoActivity screen in the XML file rather than completely in code.\\n\\nSo in summary, it defines the root layout and prepares the structure for the PedidoActivity UI that can then be populated with additional views.\&quot;,\&quot;/app/src/main/res/values-night/themes.xml\&quot;:\&quot;This file defines a night theme for the Android app.\\n\\nKey functions:\\n\\n- It is located in the res/values-night folder, which indicates it contains night mode theme definitions.\\n\\n- The \\u003cresources\\u003e tag defines the start of XML resources. \\n\\n- It defines a style called \\\&quot;Base.Theme.Agro_App\\\&quot; that will be used as the base theme for the app.\\n\\n- The parent theme \\\&quot;Theme.Material3.DayNight.NoActionBar\\\&quot; sets it to use the default Material 3 day/night theme without an action bar.\\n\\n- Comments provide guidance on customizing the dark theme colors if desired. \\n\\n- When the device is in night mode, this theme will be applied instead of the default day theme, allowing easy theming for dark/light environments.\\n\\n- It allows defining night mode colors, styles, etc in one place to maintain a consistent dark appearance throughout the app.\\n\\nSo in summary, this file defines the night theme that will be automatically applied on devices in night mode, based on the default Material 3 night theme definition.\&quot;,\&quot;/app/src/main/java/com/example/agro_app/retrofit/request/LoginRequest.java\&quot;:\&quot;This LoginRequest.java file is a model class used for making login requests to the backend API via Retrofit.\\n\\nKey points:\\n\\n- It is a POJO (Plain Old Java Object) class that defines the properties needed for a login request - correo (email) and contraseña (password).\\n\\n- It has getter and setter methods for each property to allow setting and retrieving the property values.\\n\\n- This class will be used to create LoginRequest objects and populate them with email/password values before making the API request. \\n\\n- Retrofit will serialize the LoginRequest object to JSON to send in the request body to the login endpoint. \\n\\n- The backend will then deserialize the JSON back to a LoginRequest object to retrieve the email and password for authentication.\\n\\nSo in summary, this class:\\n\\n1. Defines the model/properties for a login request \\n2. Allows populating request objects via getters/setters\\n3. Is used by Retrofit to serialize requests to JSON\\n4. Helps the backend deserialize requests from JSON\\n\\nIt acts as the data model for login requests in the Retrofit API calls.\&quot;}&quot;}" />
  </component>
</project>